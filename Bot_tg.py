import json
import os
import datetime
import time
import telebot
from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

from database import *

bot = telebot.TeleBot('6236696473:AAH_OGgS5jBhtDC7ZRA8lJwXHHZkQCfxZwg')

"""–í—Å–µ id"""
id_all = []
id_all_dict = {}
member_masage_id = {}
regist_steps_delete = {}

def all_id():
    global id_all
    global id_all_dict
    with open("id_user.json", "r", encoding='utf-8') as read_file:
        id_all_dict = json.load(read_file)
    id_all = [x for sublist in list(id_all_dict.values()) for x in sublist]
    # print(id_all)


all_id()

"""–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
reg = {}
"""–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∑–∞–∫–∞–∑–∞"""
order_dish = {}
"""–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–µ–Ω—é"""
menu_ = menu_main()

"""–ö–Ω–æ–ø–∫–∏"""
"""–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
keyb_my_orders = types.InlineKeyboardMarkup()
keyb_my_orders.add(*(types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu'),
                     types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='del_orders')))
"""–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
keyb_start_users = types.ReplyKeyboardMarkup(resize_keyboard=True)
keyb_start_users.add(*(types.KeyboardButton('–ú–µ–Ω—é'),
                       types.KeyboardButton('–ú–æ–∏ –∑–∞–∫–∞–∑—ã'),
                       types.KeyboardButton('–û—Ç–∑—ã–≤—ã')))

keyb_cancel_users = types.ReplyKeyboardMarkup(resize_keyboard=True)
keyb_cancel_users.add(*(types.KeyboardButton('–ú–µ–Ω—é'),
                        types.KeyboardButton('–ú–æ–∏ –∑–∞–∫–∞–∑—ã'),
                        types.KeyboardButton('–û—Ç–∑—ã–≤—ã'),
                        types.KeyboardButton('–û—Ç–º–µ–Ω–∞')))
#–¥–ª—è –æ—Ü–µ–Ω–∫–∏
keyb_rait = types.ReplyKeyboardMarkup(resize_keyboard=True)
keyb_rait.add(*(types.KeyboardButton('–ú–µ–Ω—é'),
                        types.KeyboardButton('–û—Ç–∑—ã–≤—ã'),
                        types.KeyboardButton('–û—Ü–µ–Ω–∏—Ç—å –±–ª—é–¥–∞')))
"""–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
keyb_reg = types.ReplyKeyboardMarkup(resize_keyboard=True)
keyb_reg.add(types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'))

"""–î–ª—è –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""


def menu_cat(val):
    if val == 'menu':
        keyb_menu = types.InlineKeyboardMarkup()
        keyb_menu.add(*(types.InlineKeyboardButton(a, callback_data='m' + a) for a in menu_.keys()))
        return keyb_menu
    elif val == 'ocenka':
        keyb_menu = types.InlineKeyboardMarkup()
        keyb_menu.add(*(types.InlineKeyboardButton(a, callback_data='o' + a) for a in menu_.keys()))
        return keyb_menu


"""–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥"""


def keyb_add_dish():
    key_d = types.InlineKeyboardMarkup()
    key_d.add(*(types.InlineKeyboardButton('–î–∞', callback_data=f'menu'),
                types.InlineKeyboardButton('–ù–µ—Ç', callback_data=f'finish_dish')))
    return key_d

def keybEND():
    button1 = types.InlineKeyboardButton('–î–∞', callback_data=f'finish_order')
    button2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data=f'cancel_order')
    button3 = types.InlineKeyboardButton('–£–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä', callback_data=f'–£–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä')
    button4 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data=f'–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')

    row1 = [button1, button2]
    row2 = [button3]
    row3 = [button4]

    key_d = types.InlineKeyboardMarkup([row1, row2,row3])

    return key_d




def keyb_finish_order():
    key_d = types.InlineKeyboardMarkup()
    key_d.add(*(types.InlineKeyboardButton('–î–∞', callback_data=f'finish_order'),
                types.InlineKeyboardButton('–ù–µ—Ç', callback_data=f'cancel_order')))

    return key_d


"""–î–ª—è –±–ª—é–¥"""

def dishs(category, message_id, val):
    if val == 'dish':
        ocenka = show_marks()
        for dish in menu_[category]:
            text = ''
            photo1 = ''
            for info in dish:
                if info == dish[1]:
                    text += '–†–µ–π—Ç–∏–Ω–≥ - ' + ocenka[f'{dish[1]}'] + ' ‚≠êÔ∏è \n'
                    text += f'–ù–∞–∑–≤–∞–Ω–∏–µ - {info}\n'
                elif info == dish[3]:
                    text += f'–°—Ç–æ–∏–º–æ—Å—Ç—å - {info}\n'
                elif info == dish[5]:
                    text += f'–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ - {info}\n'
                elif info == dish[2]:
                    photo1 = open(f'img/{info}', 'rb')
                elif info == dish[4]:
                    text += f'–°–æ—Å—Ç–∞–≤ - {info}\n'


            keyb_ = types.InlineKeyboardMarkup()
            keyb_.add(types.InlineKeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å', callback_data=f'*{dish[1]}'))
            # bot.send_message(message_id, 'üëá', reply_markup=keyb_)
            bot.send_photo(message_id, photo=photo1, caption=text, reply_markup=keyb_)

    elif val == 'comment':
        for dish in menu_[category]:
            text = ''
            photo1 = ''
            for info in dish:
                if info == dish[1]:
                    text += f'–ù–∞–∑–≤–∞–Ω–∏–µ - {info}\n'
                elif info == dish[2]:
                    photo1 = open(f'img/{info}', 'rb')
                elif info == dish[4]:
                    text += f'–°–æ—Å—Ç–∞–≤ - {info}'
            bot.send_photo(message_id, photo=photo1, caption=text)
            keyb_ = types.InlineKeyboardMarkup()
            keyb_.add(types.InlineKeyboardButton('–û—Ü–µ–Ω–∏—Ç—å', callback_data=f'@{dish[1]}'))
            bot.send_message(message_id, '–î–ª—è –æ—Ü–µ–Ω–∫–∏ –∂–º–∏ "–û—Ü–µ–Ω–∏—Ç—å"\n –û—Ü–µ–Ω–∫–∞ –±–ª—é–¥–∞ –æ—Ç 1 –¥–æ 5', reply_markup=keyb_)


"""Admin"""


def next1(name=0, d=0):
    next1 = types.InlineKeyboardMarkup()
    if name == 1 and d == 0:
        b1 = types.InlineKeyboardButton(text="–ó–∞–∫–∞–∑ —Å–¥–µ–ª–∞–Ω", callback_data="–ó–∞–∫–∞–∑ —Å–¥–µ–ª–∞–Ω")
        next1.add(b1)
    elif d == 1 and name == 1:
        b1 = types.InlineKeyboardButton(text="–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data="–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        next1.add(b1)
    elif name == 0 and d == 1:
        b1 = types.InlineKeyboardButton(text="–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data="–ó–∞–∫–∞–∑ —Å–¥–µ–ª–∞–Ω")
        next1.add(b1)
        b2 = types.InlineKeyboardButton(text="–ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ", callback_data="–ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ")
        next1.add(b2)
    elif name == 0 and d == 0:
        b1 = types.InlineKeyboardButton(text="–ó–∞–∫–∞–∑ —Å–¥–µ–ª–∞–Ω", callback_data="–ó–∞–∫–∞–∑ —Å–¥–µ–ª–∞–Ω")
        next1.add(b1)
        b2 = types.InlineKeyboardButton(text="–ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ", callback_data="–ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ")
        next1.add(b2)
    return next1


def keyb_admin():
    keyb_admin = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞ —Å—Ç–æ–ø –∏–ª–∏ —Ä–∞–Ω", callback_data="category")
    keyb_admin.add(b1)
    b2 = types.InlineKeyboardButton(text="–ë–ª—é–¥–æ –Ω–∞ —Å—Ç–æ–ø –∏–ª–∏ —Ä–∞–Ω", callback_data="dish")
    keyb_admin.add(b2)
    return keyb_admin


def stop_or_run(word=0):
    if word == "category":
        keyb_admin = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton(text="—Å—Ç–æ–ø", callback_data="cat_stop")
        keyb_admin.add(b1)
        b2 = types.InlineKeyboardButton(text="–≤–æ–∑–æ–æ–±–Ω–æ–≤–∏—Ç—å", callback_data="cat_run")
        keyb_admin.add(b2)
    else:
        keyb_admin = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton(text="—Å—Ç–æ–ø", callback_data="dish_stop")
        keyb_admin.add(b1)
        b2 = types.InlineKeyboardButton(text="–≤–æ–∑–æ–æ–±–Ω–æ–≤–∏—Ç—å", callback_data="dish_run")
        keyb_admin.add(b2)
    return keyb_admin


""""""


@bot.message_handler(
    content_types=['sticker', 'voice', 'audio', 'document', 'photo', 'video', 'caption', 'contact', 'location',
                   'venue'])
def spam(message):
    # print(message.from_user.id)
    bot.send_message(message.chat.id, f'–Ω–µ –ª–æ–º–∞–π –±–æ—Ç–∞ –ø–∂')


@bot.message_handler(content_types=['text'])
def start(message):
    global menu_
    if message.text == '/update' and message.chat.id in id_all_dict["super_admin"]:
        menu_ = menu_main()
        bot.send_message(message.chat.id, f'–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ {str(menu_)}')
    if message.text.lower() == '–∑–∞–ø–∏—à–∏' and message.chat.id in id_all_dict['dostavka']:
        bot.delete_message(message.chat.id, message.message_id)
        if message.from_user.id not in id_all_dict['members_of_dostavka']:
            id_all_dict['members_of_dostavka'].append(message.from_user.id)
            with open('id_user.json', 'w', encoding='utf-8') as file:
                json.dump(id_all_dict, file, ensure_ascii=False)
            all_id()
            bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª–∏—Å—å –≤ –≥—Ä—É–ø–ø—É "–î–æ—Å—Ç–∞–≤–∫–∞"')
    if message.text == '/data':
        date_write = datetime.date.today()
        with open(f'member_step/write_step{date_write}.txt', 'r', encoding='utf-8') as file:
            file = file.read()
            bot.send_message(message.chat.id, str(file))
    if message.text == '/start':
        if message.chat.id not in id_all:
            bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! \n –í–∞–º –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', reply_markup=keyb_reg)
        else:
            bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', reply_markup=keyb_start_users)
    if message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
        mesg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω')
        bot.register_next_step_handler(mesg, login)
    if message.text == '/run':
        if message.chat.id in id_all_dict['povars']:
            bot.send_message(message.chat.id, '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É',
                             reply_markup=next1(1))
        if message.chat.id in id_all_dict['dostavka']:
            bot.send_message(message.chat.id, '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É',
                             reply_markup=next1(1, 1))
        if message.chat.id in id_all_dict['super_admin']:
            bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –≤–æ–∑–æ–æ–±–Ω–æ–≤–∏—Ç—å',
                             reply_markup=keyb_admin())
    if message.text == '–ú–µ–Ω—é':
        bot.delete_message(message.chat.id, message.message_id)
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=menu_cat('menu'))
    if message.text == '–û—Ç–º–µ–Ω–∞':
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.chat.id, '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–µ—Ä–≤–∞–Ω\n –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ', reply_markup=keyb_start_users)
        order_dish[message.chat.id].clear()
        os.remove(f'orders/{message.chat.id}.json')
    if message.text == '–ú–æ–∏ –∑–∞–∫–∞–∑—ã':
        bot.delete_message(message.chat.id, message.message_id)
        orders = show_my_orders(message.chat.id)
        print(orders)
        if len(orders) != 0:
            for order in orders:
                bot.send_message(message.chat.id, order)
            bot.send_message(message.chat.id,
                             f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é',
                             reply_markup=keyb_my_orders)
        else:
            m = types.InlineKeyboardMarkup()
            m.add(types.InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu'))
            bot.send_message(message.chat.id,"–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",reply_markup=m)
    if message.text == '–û—Ç–∑—ã–≤—ã':
        bot.delete_message(message.chat.id, message.message_id)
        comments = show_comment()
        comments = comments[-10:]
        comments_message = ''
        k = 1
        for comment in comments:
            comments_message += f'{k})'+comment + '\n'
            k+=1
        bot.send_message(message.from_user.id, comments_message)
    if message.text == '–û—Ü–µ–Ω–∏—Ç—å –±–ª—é–¥–∞':
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=menu_cat('ocenka'))
    if message.text == '/statis':
        if message.chat.id in id_all_dict["super_admin"]:
            statist = stat()
            bot.send_message(message.chat.id, statist)


def login(message):
    bot.send_message(message.chat.id, "–≤–∞—à –ª–æ–≥–∏–Ω - " + message.text)
    reg.setdefault(message.chat.id, dict())
    reg[message.chat.id].setdefault("name", message.text)
    mesg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω')
    bot.register_next_step_handler(mesg, phone)


def phone(message):
    if message.text.isdigit():
        bot.send_message(message.chat.id, "–≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω - " + message.text)
        reg[message.chat.id].setdefault('phone_number', message.text)
        reg[message.chat.id].setdefault('tg_id', message.chat.id)
        mesg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤')
        bot.register_next_step_handler(mesg, password)
    else:
        mesg = bot.send_message(message.chat.id, '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ')
        bot.register_next_step_handler(mesg, phone)


def password(message):
    if len(message.text) < 6:
        bot.send_message(message.chat.id, "–º–∞–ª–æ —Å–∏–º–≤–æ–ª–æ–≤")
        mesg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤')
        bot.register_next_step_handler(mesg, password)
    else:
        bot.send_message(message.chat.id, "–≤–∞—à –ø–∞—Ä–æ–ª—å - " + message.text)
        reg[message.chat.id].setdefault("password", message.text)
        id_all_dict['users'].append(message.chat.id)
        # print(reg[message.chat.id])
        print(registration(reg[message.chat.id]))
        with open('id_user.json', 'w', encoding='utf-8') as file:
            json.dump(id_all_dict, file, ensure_ascii=False)
        all_id()
        # —Ñ—É–Ω–∫—Ü–∏—è
        bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å")
        bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –º–µ–Ω—é", reply_markup=keyb_start_users)




def next_step(message):
    if message.chat.id in id_all_dict['povars']:
        dict_info = for_dostavka(message.text)
        keyb11 = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=dict_info.split()[3])
        keyb11.add(b1)
        bot.send_message(id_all_dict['dostavka'][0], dict_info, reply_markup=keyb11)
        tekst = '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —Å–¥–µ–ª–∞–Ω–Ω—ã–º –µ—â–µ –∑–∞–∫–∞–∑ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–∞–∑ —Å–¥–µ–ª–∞–Ω"'
        bot.send_message(message.chat.id, tekst, reply_markup=next1())
    elif message.chat.id in id_all_dict['dostavka']:
        tekst = '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —Å–¥–µ–ª–∞–Ω–Ω—ã–º –µ—â–µ –∑–∞–∫–∞–∑ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–∞–∑ —Å–¥–µ–ª–∞–Ω"'
        bot.send_message(message.chat.id, tekst, reply_markup=next1(0, 1))


def cat_stop(message, word):
    global menu_
    # –ù—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–ø–∏—Å–∫—É –±–ª—é–¥ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    cat = menu_.keys()
    cat_tekst = ':\n'
    for i in cat:
        cat_tekst += i + ' \n'
    if word == 'cat_stop':
        if message.text.lower().capitalize() in menu_.keys():
            cat_is_stop(message.text.lower().capitalize(), "—Å—Ç–æ–ø")
            time_write = datetime.datetime.now()
            date_write = datetime.date.today()
            step_string = f"name - {message.from_user.first_name}, id - {message.from_user.id}, user_name - @{message.from_user.username} –∫–∞—Ç–µ–≥–æ—Ä–∏—è {message.text} - –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å—Ç–æ–ø, –≤ {time_write} \n"
            with open(f'member_step/write_step{date_write}.txt', 'a', encoding='utf-8') as file:
                try:
                    data = file.read()
                    data = step_string + data
                    file.write(data)
                except:
                    file.write(step_string)
            tekst = '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ'
            bot.send_message(message.chat.id, tekst, reply_markup=keyb_admin())
            menu_ = menu_main()
        else:
            bot.send_message(message.chat.id,
                             f'–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è {cat_tekst}',
                             reply_markup=keyb_admin())
    else:
        all_menu = menu_all()
        cat = all_menu.keys()
        cat_tekst = ':\n'
        for i in cat:
            cat_tekst += i + ' \n'
        if message.text.lower().capitalize() in all_menu.keys():
            cat_is_stop(message.text.lower().capitalize())
            time_write = datetime.datetime.now()
            date_write = datetime.date.today()
            step_string = f"name - {message.from_user.first_name}, id - {message.from_user.id}, user_name - @{message.from_user.username} –∫–∞—Ç–µ–≥–æ—Ä–∏—è {message.text} - –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å—Ç–æ–ø, –≤ {time_write} \n"
            with open(f'member_step/write_step{date_write}.txt', 'a', encoding='utf-8') as file:
                try:
                    data = file.read()
                    data = step_string + data
                    file.write(data)
                except:
                    file.write(step_string)
            tekst = '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ'
            bot.send_message(message.chat.id, tekst, reply_markup=keyb_admin())
            menu_ = menu_main()
        else:
            bot.send_message(message.chat.id,
                             f'–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è {cat_tekst}',
                             reply_markup=keyb_admin())


def dish_stop(message, word):
    global menu_
    values_list = []
    for cat in menu_.values():
        for dish in cat:
            # print(dish)
            values_list.append(dish[1])
    dish_tekst = ':\n'
    for i in values_list:
        dish_tekst += i + '\n'
    if word == 'dish_stop':
        dish_is_stop(message.text.lower().capitalize(), "—Å—Ç–æ–ø")
        time_write = datetime.datetime.now()
        date_write = datetime.date.today()
        step_string = f"name - {message.from_user.first_name}, id - {message.from_user.id}, user_name - @{message.from_user.username} –±–ª—é–¥–æ {message.text} - –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å—Ç–æ–ø, –≤ {time_write} \n"
        with open(f'member_step/write_step{date_write}.txt', 'a', encoding='utf-8') as file:
            try:
                data = file.read()
                data = step_string + data
                file.write(data)
            except:
                file.write(step_string)
        menu_ = menu_main()
        if message.text.lower().capitalize() in values_list:
            tekst = '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ'
            bot.send_message(message.chat.id, tekst, reply_markup=keyb_admin())
        else:
            bot.send_message(message.chat.id,
                             f'–¢–∞–∫–æ–≥–æ –±–ª—é–¥–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è {dish_tekst}',
                             reply_markup=keyb_admin())
    else:
        all_menu = menu_all()
        values_list = []
        for cat in all_menu.values():
            for dish in cat:
                # print(dish)
                values_list.append(dish[1])
        dish_tekst = ':\n'
        for i in values_list:
            dish_tekst += i + '\n'
        dish_is_stop(message.text.lower().capitalize())
        time_write = datetime.datetime.now()
        date_write = datetime.date.today()
        step_string = f"name - {message.from_user.first_name}, id - {message.from_user.id}, user_name - @{message.from_user.username} –±–ª—é–¥–æ {message.text} - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤ {time_write} \n"
        with open(f'member_step/write_step{date_write}.txt', 'a', encoding='utf-8') as file:
            try:
                data = file.read()
                data = step_string + data
                file.write(data)
            except:
                file.write(step_string)
        menu_ = menu_main()
        if message.text.lower().capitalize() in values_list:
            tekst = '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ'
            bot.send_message(message.chat.id, tekst, reply_markup=keyb_admin())
        else:
            bot.send_message(message.chat.id,
                             f'–¢–∞–∫–æ–≥–æ –±–ª—é–¥–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è {dish_tekst}',
                             reply_markup=keyb_admin())
def delete_dish(message):
    d = []
    for i,v in menu_.items():
        for j in v:
            d.append(j[1])
    if message.text.lower().capitalize() in d:
        try:
            with open(f'orders/{message.chat.id}.json', 'r+', encoding='utf-8') as file:
                file_content = file.read()
                json_data = json.loads(file_content)
                dishs = json_data
                # print(dishs)
                a = message.text.lower().capitalize()
                try:
                    del dishs["dishs"][a]
                except:
                    bot.send_message(message.chat.id,"–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç")
                if len(dishs["dishs"]) == 0:
                    file.close()
                    os.remove(f'orders/{message.chat.id}.json')
                    bot.send_message(message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",reply_markup=keyb_start_users)
                else:
                    file.seek(0)
                    file.truncate()
                    json.dump(dishs, file, ensure_ascii=False, indent=4)
                    finish_set = time_costs(dishs['dishs'])
                    bot.send_message(message.chat.id, finish_set)
                    bot.send_message(message.chat.id, '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?', reply_markup=keybEND())

        except Exception as e:
            print(e)
            msg = bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
            bot.register_next_step_handler(msg,delete_dish)
    else:
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–∞")
        msg = bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        bot.register_next_step_handler(msg, delete_dish)
def change_dish(message):

        d = []
        for i, v in menu_.items():
            for j in v:
                d.append(j[1])
        if message.text.lower().capitalize().split()[0] in d:
            try:
                with open(f'orders/{message.chat.id}.json', 'r+', encoding='utf-8') as file:
                    file_content = file.read()
                    json_data = json.loads(file_content)
                    dishs = json_data
                    # print(dishs)
                    a = message.text.lower().capitalize()
                    a = a.split()
                    try:
                        dishs["dishs"][a[0]]= a[1]
                        file.seek(0)
                        file.truncate()
                        json.dump(dishs, file, ensure_ascii=False, indent=4)
                        finish_set = time_costs(dishs['dishs'])
                        bot.send_message(message.chat.id, finish_set)
                        bot.send_message(message.chat.id, '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?', reply_markup=keybEND())
                    except:
                        msg = bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
                        bot.register_next_step_handler(msg, change_dish)


            except:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–∞")
                # msg = bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
                # bot.register_next_step_handler(msg, change_dish)
        else:
            msg = bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
            bot.register_next_step_handler(msg, change_dish)


def new_com(message, text):
    keybo = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data='GoodComment')
    keybo.add(b1)
    b2 = types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data='BadComment')
    keybo.add(b2)
    bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤')
    try:
        try:
            com = message.text + ' @' + text
            bot.send_message(id_all_dict["super_admin"][0], com, reply_markup=keybo)
            bot.delete_message(message.from_user.id, message.message_id)
        except:
            com = message.text +' @'+ message.from_user.first_name
            bot.send_message(id_all_dict["super_admin"][0], com, reply_markup=keybo)
            bot.delete_message(message.from_user.id, message.message_id)
    except:
        bot.send_message(message.from_user.id,"–ü—Ä–∏–∫–æ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)))")




"""–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥"""


def add_dish(message, name_dish):
    try:
        if message.text.lower() in ['–º–µ–Ω—é', '–º–æ–∏ –∑–∞–∫–∞–∑—ã', '–æ—Ç–∑—ã–≤—ã','–æ—Ç–º–µ–Ω–∞']:
            bot.delete_message(message.chat.id, message.message_id)
            bot.delete_message(message.chat.id, message.message_id - 1)
            bot.send_message(message.chat.id, '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–µ—Ä–≤–∞–Ω\n –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ', reply_markup=keyb_cancel_users)
            order_dish[message.chat.id].clear()
            os.remove(f'orders/{message.chat.id}.json')

        elif message.text.isdigit() and 0 < int(message.text) < 15:
            if message.chat.id in order_dish:
                order_dish[message.chat.id]['tg_id'] = message.chat.id
                order_dish[message.chat.id]['state'] = 'adress finish'
                with open(f'orders/{message.from_user.id}.json', 'w', encoding='utf-8') as file:
                    json.dump(order_dish[message.from_user.id], file, ensure_ascii=False)
                if 'dishs' in order_dish[message.chat.id]:
                    order_dish[message.chat.id]['dishs'][name_dish] = int(message.text)
                else:
                    order_dish[message.chat.id].setdefault('dishs', {name_dish: int(message.text)})
                bot.delete_message(message.chat.id, message.message_id)
                bot.delete_message(message.chat.id, message.message_id - 1)
                bot.send_message(message.chat.id, f'–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ {name_dish} - {message.text} –ø–æ—Ä—Ü–∏–∏. –ñ–µ–ª–∞–µ—Ç–µ —á—Ç–æ-—Ç–æ –µ—à–µ', reply_markup=keyb_add_dish())
                # bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—Ç–µ —á—Ç–æ-—Ç–æ –µ—à–µ', reply_markup=keyb_add_dish())
                try:
                    for i in regist_steps_delete[message.chat.id]:
                        bot.delete_message(message.chat.id,i)
                except:
                    pass
            else:
                order_dish.setdefault(message.chat.id, {'tg_id': message.chat.id})
                order_dish[message.chat.id]['state'] = 'adress finish'
                with open(f'orders/{message.from_user.id}.json', 'w', encoding='utf-8') as file:
                    json.dump(order_dish[message.from_user.id], file, ensure_ascii=False)
                order_dish[message.chat.id].setdefault('dishs', {name_dish: int(message.text)})
                bot.delete_message(message.chat.id, message.message_id)
                bot.delete_message(message.chat.id, message.message_id-1)
                bot.send_message(message.chat.id, f'–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ {name_dish} - {message.text} –ø–æ—Ä—Ü–∏–∏.–ñ–µ–ª–∞–µ—Ç–µ —á—Ç–æ-—Ç–æ –µ—à–µ?', reply_markup=keyb_add_dish())
                # bot.send_message(message.chat.id, '–ñ–µ–ª–∞–µ—Ç–µ —á—Ç–æ-—Ç–æ –µ—à–µ', reply_markup=keyb_add_dish())
        else:
            msg = bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - {name_dish}')
            bot.register_next_step_handler(msg, add_dish, name_dish)
            bot.delete_message(message.chat.id, message.message_id)
            bot.delete_message(message.chat.id, message.message_id - 1)
    except:
        pass
        # msg = bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - {name_dish}')
        # bot.register_next_step_handler(msg, add_dish, name_dish)



def address_dish(message):

    try:
        if message.text.lower() in ['–º–µ–Ω—é', '–º–æ–∏ –∑–∞–∫–∞–∑—ã', '–æ—Ç–∑—ã–≤—ã']:
            bot.send_message(message.chat.id, '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–µ—Ä–≤–∞–Ω\n –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ', reply_markup=keyb_start_users)
            order_dish[message.chat.id].clear()
            os.remove(f'orders/{message.chat.id}.json')
        elif len(message.text) < 80:
            order_dish[message.chat.id]['address'] = f'{message.text}'
            order_dish[message.chat.id]['state2'] = 'adress finish'
            with open(f'orders/{message.from_user.id}.json', 'w', encoding='utf-8') as file:
                json.dump(order_dish[message.from_user.id], file, ensure_ascii=False)
            bot.delete_message(message.chat.id, message.message_id)
            bot.delete_message(message.chat.id, message.message_id-1)
            # bot.send_message(message.chat.id, f'–í–∞—à –∞–¥—Ä–µ—Å {message.text}')
            msg = bot.send_message(message.chat.id, f'–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É')
            bot.register_next_step_handler(msg, comment_dish)
        else:
            msg = bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å')
            bot.register_next_step_handler(msg, address_dish)
    except:
        msg = bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å')
        bot.register_next_step_handler(msg, address_dish)


def comment_dish(message):
    try:
        if message.text.lower() in ['–º–µ–Ω—é', '–º–æ–∏ –∑–∞–∫–∞–∑—ã', '–æ—Ç–∑—ã–≤—ã']:
            bot.send_message(message.chat.id, '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–µ—Ä–≤–∞–Ω\n –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ', reply_markup=keyb_start_users)
            order_dish[message.chat.id].clear()
            os.remove(f'orders/{message.chat.id}.json')
        else:
            bot.delete_message(message.chat.id, message.message_id)
            bot.delete_message(message.chat.id, message.message_id - 1)
            # bot.send_message(message.chat.id, '–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω -  ' + message.text)
            order_dish[message.chat.id]['comment'] = f'{message.text}'
            order_dish[message.chat.id]['state3'] = 'comment_finish'
            with open(f'orders/{message.from_user.id}.json', 'w', encoding='utf-8') as file:
                json.dump(order_dish[message.from_user.id], file, ensure_ascii=False)
            finish_set = time_costs(order_dish[message.chat.id]['dishs'])
            # bot.send_message(message.chat.id, finish_set)
            bot.send_message(message.chat.id,finish_set+ '\n–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?', reply_markup=keybEND())
    except:
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(message.chat.id, '–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω -  ' + '–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')
            order_dish[message.chat.id]['comment'] = f'–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'
            order_dish[message.chat.id]['state3'] = 'comment_finish'
            with open(f'orders/{message.from_user.id}.json', 'w', encoding='utf-8') as file:
                json.dump(order_dish[message.from_user.id], file, ensure_ascii=False)
            finish_set = time_costs(order_dish[message.chat.id]['dishs'])
            # bot.send_message(message.chat.id, finish_set)
            bot.send_message(message.chat.id,finish_set+ '\n–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?', reply_markup=keybEND())



"""–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –±–ª—é–¥–∞"""


def dish_rating(message, name_dish):
    try:
        if message.text.isdigit() and int(message.text) in [1, 2, 3, 4, 5]:
            # {'dish_name': '–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ', 'mark': 5}
            info = {'dish_name': name_dish, 'mark': int(message.text)}
            set_mark(info)
            bot.send_message(message.from_user.id, f'–í—ã –æ—Ü–µ–Ω–∏–ª–∏ {name_dish} –≤ –æ—Ü–µ–Ω–∫—É - {message.text}',reply_markup=keyb_rait)
        else:
            bot.send_message(message.from_user.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
            msg = bot.send_message(message.chat.id, f'–ü–æ—Å—Ç–∞–≤—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5')
            bot.register_next_step_handler(msg, dish_rating, name_dish)
    except:
        msg = bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n–ü–æ—Å—Ç–∞–≤—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5')
        bot.register_next_step_handler(msg, dish_rating, name_dish)


"""–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"""


def order_del(message):
    orders = show_my_orders(message.chat.id)
    need = []
    for i in orders:
        need.append(i.split()[2])
    if message.text in need:
        id_order = message.text
        """—Ñ—É–Ω–∫—Ü–∏—è –∫—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç id –∏ —Å—Ç–∞–≤–∏—Ç –µ–≥–æ –Ω–∞ —Å—Ç–æ–ø"""
        is_canceled(int(id_order))
        bot.send_message(message.chat.id, f'–ó–∞–∫–∞–∑ ‚Ññ {id_order} –æ—Ç–º–µ–Ω–µ–Ω \n –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Å—Ç–∞—Ä—Ç –º–µ–Ω—é')
        bot.delete_message(message.chat.id, message.message_id)
        bot.delete_message(message.chat.id,message.message_id-1)
        bot.delete_message(message.chat.id, message.message_id - 3)
        for i in range(3):
            try:
                bot.delete_message(message.chat.id, message.message_id - 3-i)
            except:
                pass
        bot.send_message(id_all_dict["povars"][0],  f' –ó–ê–ö–ê–ó –ù–û–ú–ï–† - {id_order}- –û–¢–ú–ï–ù–ï–ù')
    else:
        bot.send_message(message.chat.id, f'—É –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞!!!')
        bot.delete_message(message.chat.id, message.message_id)
        bot.delete_message(message.chat.id, message.message_id - 1)


"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–±–æ–π –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"""


def proverka():
    orders_list_id = os.listdir('orders')
    for order in orders_list_id:
        with open(f'orders/{order}', 'r', encoding='utf-8') as file:
            data = json.load(file)
        order_dish[int(data['tg_id'])] = data
        if 'state3' in data.keys():
            bot.send_message(data['tg_id'], '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?', reply_markup=keyb_finish_order())
        elif 'state2' in data.keys():
            msg = bot.send_message(data['tg_id'], f'–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
            bot.register_next_step_handler(msg, comment_dish)
        elif 'state1' in data.keys():
            msg = bot.send_message(data['tg_id'], f'–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å')
            bot.register_next_step_handler(msg, address_dish)
        elif 'state' in data.keys():
            bot.send_message(data['tg_id'], '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ', reply_markup=menu_cat('menu'))
            os.remove(f'orders/{order}')


""""""
proverka()


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):

    if call.data == 'menu':
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=menu_cat('menu'))
    elif call.data == 'BadComment':
        bot.send_message(call.message.chat.id, "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ù–ï –û–ü–£–ë–õ–ò–ö–û–í–ê–ù")
        bot.delete_message(call.message.chat.id, call.message.message_id)
    elif call.data == 'GoodComment':
        bot.send_message(call.message.chat.id, "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π  –û–ü–£–ë–õ–ò–ö–û–í–ê–ù")
        add_comment({'comment': [call.message.text]})
        bot.delete_message(call.message.chat.id, call.message.message_id)
    elif call.data == '–•–æ—á—É –∫–æ–º–º–µ–Ω—Ç':
        text = '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
        a = bot.send_message(call.message.chat.id, text)
        bot.register_next_step_handler(a, new_com, call.from_user.username)
    elif call.data == '–ù–µ —Ö–æ—á—É –∫–æ–º–º–µ–Ω—Ç':
        text = '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏'
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, text)
    elif call.data[0] == 'm':
        massage_id = call.from_user.id
        dishs(call.data[1:], massage_id, 'dish')
        if call.from_user.id not in regist_steps_delete.keys():
            regist_steps_delete[call] = [call.message.message_id]
        else:
            regist_steps_delete[call].append(call.message.message_id)

    elif call.data == "–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω":
        text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞'
        a = bot.send_message(call.message.chat.id, text)
        bot.register_next_step_handler(a, next_step)
    elif call.data == '–ó–∞–∫–∞–∑ —Å–¥–µ–ª–∞–Ω':
        text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞'
        a = bot.send_message(call.message.chat.id, text)
        bot.register_next_step_handler(a, next_step)
    elif call.data == '–ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ':
        if call.message.chat.id in id_all_dict['povars']:
            bot.send_message(call.message.chat.id,
                             '–°–ø–∞—Å–∏–±–æ, –µ—Å–ª–∏ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ –µ—â–µ –∫–∞–∫–æ–µ-—Ç–æ –±–ª—é–¥–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–∞–∑ —Å–¥–µ–ª–∞–Ω" ',
                             reply_markup=next1(1))
        if call.message.chat.id in id_all_dict['dostavka']:
            bot.send_message(call.message.chat.id,
                             '–°–ø–∞—Å–∏–±–æ, –µ—Å–ª–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –µ—â–µ –∫–∞–∫–æ–µ-—Ç–æ –±–ª—é–¥–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–∞–∑ —Å–¥–µ–ª–∞–Ω" ',
                             reply_markup=next1(1, 1))
    elif call.data == 'category':
        # –ø—Ä–æ–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ if
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å ', reply_markup=stop_or_run(call.data))
    elif call.data == 'dish':
        # –ø—Ä–æ–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ if
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å ', reply_markup=stop_or_run(call.data))
    elif call.data == 'dish_stop' or call.data == 'dish_run':
        # –ø—Ä–æ–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ if
        text = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞'
        word = call.data
        a = bot.send_message(call.message.chat.id, text)
        bot.register_next_step_handler(a, dish_stop, word)
    elif call.data == 'cat_stop' or call.data == 'cat_run':
        # –ø—Ä–æ–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ if
        word = call.data
        text = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
        a = bot.send_message(call.message.chat.id, text)
        bot.register_next_step_handler(a, cat_stop, word)
    elif call.data[0] == '*':
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        msg = bot.send_message(call.message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - {call.data[1:]}')
        bot.register_next_step_handler(msg, add_dish, call.data[1:])
        if call.from_user.id not in regist_steps_delete.keys():
            regist_steps_delete[call] = [call.message.message_id]
            regist_steps_delete[call].append(call.message.message_id + 1)
        else:
            regist_steps_delete[call].append(call.message.message_id)
            regist_steps_delete[call].append(call.message.message_id+1)



    elif call.data == 'finish_dish':
        order_dish[call.from_user.id]['state1'] = 'order finish'
        with open(f'orders/{call.from_user.id}.json', 'w', encoding='utf-8') as file:
            json.dump(order_dish[call.from_user.id], file, ensure_ascii=False)
        msg = bot.send_message(call.message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å')
        bot.register_next_step_handler(msg, address_dish)
        bot.delete_message(call.message.chat.id,call.message.message_id)
    elif call.data == '–£–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä':
        msg = bot.send_message(call.message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞')
        bot.register_next_step_handler(msg,delete_dish)
        bot.delete_message(call.message.chat.id, call.message.message_id)
    elif call.data == '–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ':
        msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω—É–∂–Ω–æ. –ü—Ä–∏–º–µ—Ä: –°–æ–∫ 2')
        bot.register_next_step_handler(msg, change_dish)
        bot.delete_message(call.message.chat.id, call.message.message_id)

    elif call.data == 'finish_order':
        try:
            # print(order_dish[call.message.chat.id])
            ordering(order_dish[call.message.chat.id]['dishs'], order_dish[call.message.chat.id])
            try:
                os.remove(f'orders/{call.message.chat.id}.json')
            except:
                pass
            cooks = for_cook()
            date_order = datetime.date.today()
            try:
                os.mkdir(f'orders_add/{date_order}')
            except:
                pass
            for cook in cooks:
                bot.send_message(id_all_dict["povars"][0], cook)
                with open(f'orders_add/{date_order}/{call.message.chat.id}_{cook.split(":")[0]}.json', 'w',
                          encoding='utf-8') as file:
                    json.dump(cook, file, ensure_ascii=False)
            order_dish[call.message.chat.id] = {}
            bot.send_message(call.message.chat.id, f'–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –∫—É—Ö–Ω—é\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ—â–µ –∑–∞–∫–∞–∑ –∂–º–∏—Ç–µ –º–µ–Ω—é',
                             reply_markup=keyb_start_users)
            for k,v in regist_steps_delete.items():
                for j in v:
                    try:
                        bot.delete_message(call.message.chat.id,j)
                    except:
                        pass
        except:
            bot.send_message(call.message.chat.id,"–í–∞—à –∑–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω")
        bot.delete_message(call.message.chat.id, call.message.message_id)
    elif call.data == 'cancel_order':
        try:
            os.remove(f'orders/{call.message.chat.id}.json')
        except:
            pass
        order_dish[call.message.chat.id] = {}
        bot.send_message(call.message.chat.id, f'–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ—â–µ –∑–∞–∫–∞–∑ –∂–º–∏—Ç–µ –º–µ–Ω—é',
                         reply_markup=keyb_start_users)
        bot.delete_message(call.message.chat.id,call.message.message_id)
    elif call.data == 'del_orders':
        mseg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id –∑–∞–∫–∞–∑–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –æ—Ç–º–µ–Ω–∏—Ç—å')
        bot.register_next_step_handler(mseg, order_del)
        bot.delete_message(call.message.chat.id, call.message.message_id)
    elif call.data[0] == 'o':
        massage_id = call.from_user.id
        dishs(call.data[1:], massage_id, 'comment')
    elif call.data[0] == '@':
        msg = bot.send_message(call.message.chat.id, f'–ü–æ—Å—Ç–∞–≤—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5')
        bot.register_next_step_handler(msg, dish_rating, call.data[1:])
    elif int(call.data) in range(1500) and call.message.chat.id in id_all_dict['dostavka']:
        a = call.message.text
        keyb22 = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton(text="–î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ", callback_data=a.split()[3])
        keyb22.add(b1)
        bot.send_message(call.from_user.id, a, reply_markup=keyb22)
        # new
        for_user = (find_id_user(a.split()[3]))
        bot.send_message(for_user, '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º - ' + '@' + call.from_user.username)
        # new
        d = call.message.text + '\n' + '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –¥–æ—Å—Ç–∞–≤—â–∏–∫–æ–º - ' + '@' + call.from_user.username
        bot.send_message(call.message.chat.id, d)

        bot.delete_message(call.message.chat.id, call.message.message_id)

    elif int(call.data) in range(1500) and call.from_user.id in id_all_dict['members_of_dostavka']:
        # —Ñ—É–Ω–∫—Ü–∏—è —á—Ç–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # print(f'number ===== {call.data}')
        keyb22 = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton(text="–î–∞", callback_data='–•–æ—á—É –∫–æ–º–º–µ–Ω—Ç')
        keyb22.add(b1)
        b1 = types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data='–ù–µ —Ö–æ—á—É –∫–æ–º–º–µ–Ω—Ç')
        keyb22.add(b1)
        b = call.message.text
        b = b.split()[3]
        adress = find_id_user(b)
        bot.send_message(adress, "–í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!\n–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?", reply_markup=keyb22)
        bot.send_message(adress, "–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –±–ª—é–¥–æ, –∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É",reply_markup=keyb_rait)
        is_done(int(call.data))
        # new
        d = call.message.text + '\n' + '–ó–ê–ö–ê–ó –î–û–°–¢–ê–í–õ–ï–ù'
        bot.send_message(call.from_user.id, d)
        bot.send_message(id_all_dict["super_admin"][0], d + f' –∑–∞–∫–∞–∑—á–∏–∫–æ–º - @{call.from_user.username}')
        bot.delete_message(call.from_user.id, call.message.message_id)


print("Ready")
bot.infinity_polling()
